{"ast":null,"code":"import { TASK_LIST_ACTION } from '../constants';\nimport { createReducer } from \"@reduxjs/toolkit\";\nconst initialState = localStorage.tasks && JSON.parse(localStorage.tasks) || {\n  taskList: []\n};\n\nconst saveLocal = taskList => {\n  localStorage.tasks = JSON.stringify(taskList);\n};\n\nconst taskListReducer = createReducer(initialState, {\n  [TASK_LIST_ACTION.ADD_TASK]: (state, {\n    payload\n  }) => {\n    let task = { ...state,\n      taskList: [...state.taskList, payload]\n    };\n    saveLocal(task);\n    return task;\n  },\n  [TASK_LIST_ACTION.EDIT_TASK]: (state, {\n    payload\n  }) => {\n    let tasks = [...state.taskList];\n    let taskIndex = tasks.findIndex(task => task.id === payload.id);\n    tasks.splice(taskIndex, 1, payload);\n    let newTaskList = { ...state,\n      taskList: tasks\n    };\n    saveLocal(newTaskList);\n    return newTaskList;\n  },\n  [TASK_LIST_ACTION.DELETE_TASK]: (state, {\n    payload\n  }) => {\n    let tasks = [...state.taskList];\n    let taskIndex = tasks.findIndex(task => task.id === payload.id);\n    tasks.splice(taskIndex, 1);\n    let newTaskList = { ...state,\n      taskList: tasks\n    };\n    saveLocal(newTaskList);\n    return newTaskList;\n  }\n});\nexport default taskListReducer;","map":{"version":3,"sources":["/home/huyhuanhg/learn/FE18/ReacJs/Exercise/to-do-app_redux-toolkit/src/redux/reducers/taskLisk.reducer.js"],"names":["TASK_LIST_ACTION","createReducer","initialState","localStorage","tasks","JSON","parse","taskList","saveLocal","stringify","taskListReducer","ADD_TASK","state","payload","task","EDIT_TASK","taskIndex","findIndex","id","splice","newTaskList","DELETE_TASK"],"mappings":"AAAA,SAAQA,gBAAR,QAA+B,cAA/B;AACA,SAAQC,aAAR,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAGC,YAAY,CAACC,KAAb,IAAsBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,KAAxB,CAAtB,IAAwD;AAACG,EAAAA,QAAQ,EAAE;AAAX,CAA7E;;AAEA,MAAMC,SAAS,GAAID,QAAD,IAAc;AAC5BJ,EAAAA,YAAY,CAACC,KAAb,GAAqBC,IAAI,CAACI,SAAL,CAAeF,QAAf,CAArB;AACH,CAFD;;AAGA,MAAMG,eAAe,GAAGT,aAAa,CAACC,YAAD,EAAe;AAChD,GAACF,gBAAgB,CAACW,QAAlB,GAA6B,CAACC,KAAD,EAAQ;AAACC,IAAAA;AAAD,GAAR,KAAsB;AAC/C,QAAIC,IAAI,GAAG,EACP,GAAGF,KADI;AAEPL,MAAAA,QAAQ,EAAE,CACN,GAAGK,KAAK,CAACL,QADH,EAENM,OAFM;AAFH,KAAX;AAOAL,IAAAA,SAAS,CAACM,IAAD,CAAT;AACA,WAAOA,IAAP;AACH,GAX+C;AAYhD,GAACd,gBAAgB,CAACe,SAAlB,GAA8B,CAACH,KAAD,EAAQ;AAACC,IAAAA;AAAD,GAAR,KAAsB;AAChD,QAAIT,KAAK,GAAG,CAAC,GAAGQ,KAAK,CAACL,QAAV,CAAZ;AACA,QAAIS,SAAS,GAAGZ,KAAK,CAACa,SAAN,CAAgBH,IAAI,IAAIA,IAAI,CAACI,EAAL,KAAYL,OAAO,CAACK,EAA5C,CAAhB;AACAd,IAAAA,KAAK,CAACe,MAAN,CAAaH,SAAb,EAAwB,CAAxB,EAA2BH,OAA3B;AACA,QAAIO,WAAW,GAAG,EACd,GAAGR,KADW;AAEdL,MAAAA,QAAQ,EAAEH;AAFI,KAAlB;AAIAI,IAAAA,SAAS,CAACY,WAAD,CAAT;AACA,WAAOA,WAAP;AACH,GAtB+C;AAuBhD,GAACpB,gBAAgB,CAACqB,WAAlB,GAAgC,CAACT,KAAD,EAAQ;AAACC,IAAAA;AAAD,GAAR,KAAsB;AAClD,QAAIT,KAAK,GAAG,CAAC,GAAGQ,KAAK,CAACL,QAAV,CAAZ;AACA,QAAIS,SAAS,GAAGZ,KAAK,CAACa,SAAN,CAAgBH,IAAI,IAAIA,IAAI,CAACI,EAAL,KAAYL,OAAO,CAACK,EAA5C,CAAhB;AACAd,IAAAA,KAAK,CAACe,MAAN,CAAaH,SAAb,EAAwB,CAAxB;AACA,QAAII,WAAW,GAAG,EACd,GAAGR,KADW;AAEdL,MAAAA,QAAQ,EAAEH;AAFI,KAAlB;AAIAI,IAAAA,SAAS,CAACY,WAAD,CAAT;AACA,WAAOA,WAAP;AACH;AAjC+C,CAAf,CAArC;AAoCA,eAAeV,eAAf","sourcesContent":["import {TASK_LIST_ACTION} from '../constants';\nimport {createReducer} from \"@reduxjs/toolkit\";\n\nconst initialState = localStorage.tasks && JSON.parse(localStorage.tasks) || {taskList: []};\n\nconst saveLocal = (taskList) => {\n    localStorage.tasks = JSON.stringify(taskList);\n}\nconst taskListReducer = createReducer(initialState, {\n    [TASK_LIST_ACTION.ADD_TASK]: (state, {payload}) => {\n        let task = {\n            ...state,\n            taskList: [\n                ...state.taskList,\n                payload,\n            ]\n        };\n        saveLocal(task);\n        return task;\n    },\n    [TASK_LIST_ACTION.EDIT_TASK]: (state, {payload}) => {\n        let tasks = [...state.taskList];\n        let taskIndex = tasks.findIndex(task => task.id === payload.id);\n        tasks.splice(taskIndex, 1, payload);\n        let newTaskList = {\n            ...state,\n            taskList: tasks\n        }\n        saveLocal(newTaskList);\n        return newTaskList;\n    },\n    [TASK_LIST_ACTION.DELETE_TASK]: (state, {payload}) => {\n        let tasks = [...state.taskList];\n        let taskIndex = tasks.findIndex(task => task.id === payload.id);\n        tasks.splice(taskIndex, 1);\n        let newTaskList = {\n            ...state,\n            taskList: tasks\n        }\n        saveLocal(newTaskList);\n        return newTaskList;\n    },\n});\n\nexport default taskListReducer;\n"]},"metadata":{},"sourceType":"module"}