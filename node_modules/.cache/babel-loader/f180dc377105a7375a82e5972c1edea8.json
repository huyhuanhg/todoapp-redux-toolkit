{"ast":null,"code":"import { TASK_LIST_ACTION } from '../constants';\nimport { createReducer } from \"@reduxjs/toolkit\";\nconst initialState = localStorage.tasks && JSON.parse(localStorage.tasks) || {\n  taskList: []\n};\n\nconst saveLocal = taskList => {\n  localStorage.tasks = JSON.stringify(taskList);\n};\n\nconst taskListReducer = createReducer(initialState, {\n  [TASK_LIST_ACTION.ADD_TASK]: (state, action) => {\n    let task = { ...state,\n      taskList: [...state.taskList, action.payload]\n    };\n    saveLocal(task);\n    return task;\n  },\n  [TASK_LIST_ACTION.EDIT_TASK]: (state, action) => {\n    let {\n      id\n    } = action.payload;\n    let tasks = [...state.taskList];\n    let taskIndex = tasks.findIndex(task => task.id === id);\n    console.log(taskIndex);\n    tasks.splice(taskIndex, 1, action.payload);\n    console.log(tasks);\n    return { ...state\n    }; // task.taskList.splice(action.payload.index, 1, action.payload.value);\n    // saveLocal(task);\n    // return task;\n  },\n  [TASK_LIST_ACTION.DELETE_TASK]: (state, action) => {\n    let task = { ...state\n    };\n    task.taskList.splice(action.payload.index, 1);\n    saveLocal(task);\n    return task;\n  }\n});\nexport default taskListReducer;","map":{"version":3,"sources":["/home/huyhuanhg/learn/FE18/ReacJs/Exercise/to-do-app_redux-toolkit/src/redux/reducers/taskLisk.reducer.js"],"names":["TASK_LIST_ACTION","createReducer","initialState","localStorage","tasks","JSON","parse","taskList","saveLocal","stringify","taskListReducer","ADD_TASK","state","action","task","payload","EDIT_TASK","id","taskIndex","findIndex","console","log","splice","DELETE_TASK","index"],"mappings":"AAAA,SAAQA,gBAAR,QAA+B,cAA/B;AACA,SAAQC,aAAR,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAGC,YAAY,CAACC,KAAb,IAAsBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,KAAxB,CAAtB,IAAwD;AAACG,EAAAA,QAAQ,EAAE;AAAX,CAA7E;;AAEA,MAAMC,SAAS,GAAID,QAAD,IAAc;AAC5BJ,EAAAA,YAAY,CAACC,KAAb,GAAqBC,IAAI,CAACI,SAAL,CAAeF,QAAf,CAArB;AACH,CAFD;;AAGA,MAAMG,eAAe,GAAGT,aAAa,CAACC,YAAD,EAAe;AAChD,GAACF,gBAAgB,CAACW,QAAlB,GAA6B,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC5C,QAAIC,IAAI,GAAG,EACP,GAAGF,KADI;AAEPL,MAAAA,QAAQ,EAAE,CACN,GAAGK,KAAK,CAACL,QADH,EAENM,MAAM,CAACE,OAFD;AAFH,KAAX;AAOAP,IAAAA,SAAS,CAACM,IAAD,CAAT;AACA,WAAOA,IAAP;AACH,GAX+C;AAYhD,GAACd,gBAAgB,CAACgB,SAAlB,GAA8B,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC7C,QAAI;AAAEI,MAAAA;AAAF,QAASJ,MAAM,CAACE,OAApB;AACA,QAAIX,KAAK,GAAG,CAAC,GAAGQ,KAAK,CAACL,QAAV,CAAZ;AACA,QAAIW,SAAS,GAAGd,KAAK,CAACe,SAAN,CAAgBL,IAAI,IAAIA,IAAI,CAACG,EAAL,KAAYA,EAApC,CAAhB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;AACAd,IAAAA,KAAK,CAACkB,MAAN,CAAaJ,SAAb,EAAwB,CAAxB,EAA2BL,MAAM,CAACE,OAAlC;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYjB,KAAZ;AACA,WAAO,EAAC,GAAGQ;AAAJ,KAAP,CAP6C,CAQ7C;AACA;AACA;AACH,GAvB+C;AAwBhD,GAACZ,gBAAgB,CAACuB,WAAlB,GAAgC,CAACX,KAAD,EAAQC,MAAR,KAAmB;AAC/C,QAAIC,IAAI,GAAG,EAAC,GAAGF;AAAJ,KAAX;AACAE,IAAAA,IAAI,CAACP,QAAL,CAAce,MAAd,CAAqBT,MAAM,CAACE,OAAP,CAAeS,KAApC,EAA2C,CAA3C;AACAhB,IAAAA,SAAS,CAACM,IAAD,CAAT;AACA,WAAOA,IAAP;AACH;AA7B+C,CAAf,CAArC;AAgCA,eAAeJ,eAAf","sourcesContent":["import {TASK_LIST_ACTION} from '../constants';\nimport {createReducer} from \"@reduxjs/toolkit\";\n\nconst initialState = localStorage.tasks && JSON.parse(localStorage.tasks) || {taskList: []};\n\nconst saveLocal = (taskList) => {\n    localStorage.tasks = JSON.stringify(taskList);\n}\nconst taskListReducer = createReducer(initialState, {\n    [TASK_LIST_ACTION.ADD_TASK]: (state, action) => {\n        let task = {\n            ...state,\n            taskList: [\n                ...state.taskList,\n                action.payload,\n            ]\n        };\n        saveLocal(task);\n        return task;\n    },\n    [TASK_LIST_ACTION.EDIT_TASK]: (state, action) => {\n        let { id } = action.payload;\n        let tasks = [...state.taskList];\n        let taskIndex = tasks.findIndex(task => task.id === id);\n        console.log(taskIndex)\n        tasks.splice(taskIndex, 1, action.payload);\n        console.log(tasks)\n        return {...state};\n        // task.taskList.splice(action.payload.index, 1, action.payload.value);\n        // saveLocal(task);\n        // return task;\n    },\n    [TASK_LIST_ACTION.DELETE_TASK]: (state, action) => {\n        let task = {...state};\n        task.taskList.splice(action.payload.index, 1);\n        saveLocal(task);\n        return task;\n    },\n});\n\nexport default taskListReducer;\n"]},"metadata":{},"sourceType":"module"}